//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UsuarioEntities : DbContext
    {
        public UsuarioEntities()
            : base("name=UsuarioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Direcciones> Direcciones { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual int ActualizarDireccion(Nullable<int> idDireccion, string nombre, string calle, string codigoPais)
        {
            var idDireccionParameter = idDireccion.HasValue ?
                new ObjectParameter("IdDireccion", idDireccion) :
                new ObjectParameter("IdDireccion", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var codigoPaisParameter = codigoPais != null ?
                new ObjectParameter("CodigoPais", codigoPais) :
                new ObjectParameter("CodigoPais", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarDireccion", idDireccionParameter, nombreParameter, calleParameter, codigoPaisParameter);
        }
    
        public virtual int ActualizarUsuario(Nullable<int> idUsuario, string nombre, string email, string telefono, string password, string taxId)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var taxIdParameter = taxId != null ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarUsuario", idUsuarioParameter, nombreParameter, emailParameter, telefonoParameter, passwordParameter, taxIdParameter);
        }
    
        public virtual int AgregarDireccion(string nombre, string calle, string codigoPais, Nullable<int> usuarioId)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var codigoPaisParameter = codigoPais != null ?
                new ObjectParameter("CodigoPais", codigoPais) :
                new ObjectParameter("CodigoPais", typeof(string));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("UsuarioId", usuarioId) :
                new ObjectParameter("UsuarioId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarDireccion", nombreParameter, calleParameter, codigoPaisParameter, usuarioIdParameter);
        }
    
        public virtual int AgregarUsuario(string nombre, string email, string telefono, string password, string taxId, Nullable<System.DateTimeOffset> fechaCreacion)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var taxIdParameter = taxId != null ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarUsuario", nombreParameter, emailParameter, telefonoParameter, passwordParameter, taxIdParameter, fechaCreacionParameter);
        }
    
        public virtual int Eliminar(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar", idUsuarioParameter);
        }
    
        public virtual ObjectResult<GetAll_Result> GetAll(string sortBy)
        {
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Result>("GetAll", sortByParameter);
        }
    
        public virtual int FiltroDinamico(string campo, string operacion, string valor)
        {
            var campoParameter = campo != null ?
                new ObjectParameter("Campo", campo) :
                new ObjectParameter("Campo", typeof(string));
    
            var operacionParameter = operacion != null ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(string));
    
            var valorParameter = valor != null ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FiltroDinamico", campoParameter, operacionParameter, valorParameter);
        }
    
        public virtual ObjectResult<SpLogin_Result> SpLogin(string taxId, string password)
        {
            var taxIdParameter = taxId != null ?
                new ObjectParameter("TaxId", taxId) :
                new ObjectParameter("TaxId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLogin_Result>("SpLogin", taxIdParameter, passwordParameter);
        }
    }
}
